Git is a powerful version control system that helps developers manage and track changes in their code. 
---

 **1. Setting Up Git**
Before using Git, you need to configure it with your name and email. This information will be attached to your commits.

bash
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"


- **Check Configuration:**
  bash
  git config --list
  

---

 **2. Initializing a Repository**
To start using Git in a project, you need to initialize a repository.

bash
git init

- This creates a hidden `.git` folder in your project directory, which tracks all changes.

---

 **3. Cloning a Repository**
To work on an existing project, you can clone a repository from GitHub or any other remote server.

bash
git clone <repository-url>

- Example:
  bash
  git clone https://github.com/username/repository-name.git
  
- This downloads the entire project to your local machine.

---

 **4. Checking the Status**
To see the current state of your working directory and staging area, use:

bash
git status

- It shows:
  - Untracked files (new files not yet added to Git).
  - Changes not staged for commit (modified files).
  - Changes staged for commit (files ready to be committed).

---

 **5. Adding Files to the Staging Area**
Before committing changes, you need to add files to the staging area.

bash
git add <file-name>

- To add a specific file:
  bash
  git add index.html
  
- To add all changes:
  bash
  git add .
  

---

 **6. Committing Changes**
A commit saves the changes in your staging area to the repository.

bash
git commit -m "Your commit message"

- Example:
  bash
  git commit -m "Added login functionality"
  
- Always write clear and concise commit messages.

---

 **7. Viewing Commit History**
To see a log of all commits:

bash
git log

- This shows:
  - Commit hash (unique ID).
  - Author.
  - Date and time.
  - Commit message.

- For a compact view:
  bash
  git log --oneline
  

---

 **8. Pushing Changes to Remote Repository**
To upload your local commits to a remote repository (e.g., GitHub):

bash
git push origin <branch-name>

- Example:
  bash
  git push origin main
  
- If itâ€™s your first push, use:
  bash
  git push -u origin main
  

---

 **9. Pulling Changes from Remote Repository**
To download the latest changes from the remote repository:

bash
git pull origin <branch-name>

- Example:
  bash
  git pull origin main
  
- This fetches and merges changes from the remote branch to your local branch.

---

 **10. Branching**
Branches allow you to work on different versions of your project simultaneously.

- **Create a new branch:**
  bash
  git branch <branch-name>
  
- **Switch to a branch:**
  bash
  git checkout <branch-name>
  
- **Create and switch to a new branch:**
  bash
  git checkout -b <branch-name>
  
- **List all branches:**
  bash
  git branch
  
- **Delete a branch:**
  bash
  git branch -d <branch-name>
  

---

 **11. Merging Branches**
To combine changes from one branch into another:

1. Switch to the branch you want to merge into:
   bash
   git checkout main
   
2. Merge the other branch:
   bash
   git merge <branch-name>
   

---

 **12. Stashing Changes**
If you need to switch branches but donâ€™t want to commit your current changes, you can stash them.

- **Stash changes:**
  bash
  git stash
  
- **Apply stashed changes:**
  bash
  git stash apply
  
- **List all stashes:**
  bash
  git stash list
  
- **Clear stashes:**
  bash
  git stash clear
  

---

 **13. Undoing Changes**
- **Unstage a file:**
  bash
  git reset <file-name>
  
- **Revert changes in a file:**
  bash
  git checkout -- <file-name>
  
- **Amend the last commit:**
  bash
  git commit --amend
  

---

 **14. Remote Repositories**
- **Add a remote repository:**
  bash
  git remote add origin <repository-url>
  
- **View remote repositories:**
  bash
  git remote -v
  
- **Remove a remote repository:**
  bash
  git remote remove origin
  

---

 **15. Fetching Changes**
To download changes from a remote repository without merging:

bash
git fetch origin


---

 **16. Tagging**
Tags are used to mark specific points in history (e.g., releases).

- **Create a tag:**
  bash
  git tag <tag-name>
  
- **Push tags to remote:**
  bash
  git push origin --tags
  

---

 **17. Ignoring Files**
To exclude files from being tracked by Git, create a `.gitignore` file and list the files/folders you want to ignore.

Example `.gitignore`:

node_modules/
.env
*.log


---

 **18. Resolving Merge Conflicts**
When Git cannot automatically merge changes, it will prompt you to resolve conflicts manually.

1. Open the conflicted file and look for conflict markers (`<<<<<<<`, `=======`, `>>>>>>>`).
2. Edit the file to resolve the conflict.
3. Add the resolved file and commit:
   bash
   git add <file-name>
   git commit
   

---

 **Cheat Sheet of Basic Commands**
| **Command**                     | **Description**                                      |
|---------------------------------|------------------------------------------------------|
| `git init`                      | Initialize a new Git repository.                    |
| `git clone <url>`               | Clone a remote repository.                          |
| `git add <file>`                | Add files to the staging area.                      |
| `git commit -m "message"`       | Commit changes with a message.                      |
| `git status`                    | Check the status of your working directory.         |
| `git push origin <branch>`      | Push changes to a remote repository.                |
| `git pull origin <branch>`      | Pull changes from a remote repository.              |
| `git branch <branch-name>`      | Create a new branch.                                |
| `git checkout <branch-name>`    | Switch to a branch.                                 |
| `git merge <branch-name>`       | Merge a branch into the current branch.             |
| `git stash`                     | Temporarily save changes.                           |
| `git log`                       | View commit history.                                |
| `git remote -v`                 | View remote repositories.                           |
| `git fetch`                     | Download changes from a remote repository.          |

---

Let me know if you need further clarification or examples for any of these commands! ðŸ˜Š